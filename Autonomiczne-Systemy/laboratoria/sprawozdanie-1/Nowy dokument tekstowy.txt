%% Libs
\documentclass[polish,11pt,a4paper]{article}
\usepackage[a4paper, margin=2cm]{geometry}
\usepackage[T1]{fontenc}
\usepackage{babel}
\usepackage{graphicx}
\usepackage{ragged2e}
\usepackage{caption}
\usepackage{amsmath} 
\usepackage{amssymb} 
\usepackage{setspace}
\usepackage[utf8]{inputenc}
\usepackage{subfig}
\usepackage{cancel}
\usepackage{import}
\usepackage{svg}

%% start document
\begin{document}
	
	%% Strona tytułowa
	\setstretch{1.5}
	\centering
	\section*{PRACA PRZEJŚCIOWA}
	\section*{Projekt oprogramowania do matematycznego modelowania układów niecałkowitego rzędu}
	
	\large
	KOD PRZEDMIOTU: MYAR2S22001M
	\break
	\large
	\break
	\break
	\break
	
	\raggedright
	Autor: Ostaszewicz Dawid
	\break
	
	Kierunek: Automatyka i Robotyka, II stopień

	Prowadzący: dr inż. Tomasz Huścio
	\clearpage
\justifying
\section*{Cel projektu}
Celem projektu jest opracowanie oprogramowania do matematycznego modelowania układów niecałkowitego rzędu. Badania nad układami tego rodzaju z roku na rok przyciągają coraz szersze grono ekspertów z dziedziny automatyki i teorii sterowania. Taka sytuacja ma miejsce ze względu na zdecydowanie poprawione warunki dynamiczne rachunku całkowo-różniczkowego niecałkowitego rzędu, względem klasycznych układów całkowitych.
\section*{Analiza literatury}
Rachunek ułamkowego rzędu ma swoje początki już w 1832 r. Badania wybitnego matematyka Josepha Riemanna doprowadziły do powstania generalizacji silni z argumentów będących liczbami naturalnymi do liczb rzeczywistych. Uogólniona funkcja nazywa się funkcją gamma i jest aproksymacją, która zwiększa dziedzinę wartości funkcji silni. Na przestrzeni ostatnich stu lat powstało wiele definicji rachunku ułamkowego rzędu. Główny trzon stanowią definicje Riemann'a-Liouvill'a, która jest stosunkowo prosta od obliczenia i przekształcania, jednak nie można w niej założyć warunków początkowych. Następną popularną definicją jest różniczka Caputo, jest odrobinę trudniejsza w przekształceniach, jednak pozwala na badanie rachunku pod względem różnych warunków początkowych. Trzecią najczęściej stosowaną definicją jest definicja dyskretna Grünwald'a-Letnikov'a. Znaczącą cechą rachunku jest posiadanie pamięci, która w różnych definicjach różnie współdziała wraz z postępem czasu i w inny sposób wpływa na przyszłe działanie układu. Podstawowe definicje i matematyczną stronę rachunku omawia prof. Podlubny [37]. Prof. Kaczorek wraz z dr. Rogowskim opisują zastosowanie rachunku w układach odnoszących się do teorii sterowania [21],[22]. Główny trzon badań nad matematyką i implementacją mikroprocesorową wymienianego rachunku prowadzi również prof. Ostalczyk [33]. Obecnie istnieje kilka bibliotek Matlab'a do wykonywania symulacji układów niecałkowitego rzędu. W tej dziedzinie wiodą FOMCON, FOTF [6], [42], [43]. Definicję dyskretną w oprogramowaniu stosował prof. Ostalczyk [11]. Rozwój rachunku i metod numerycznych prowadzi do rozwoju bardziej zaawansowanych technik sterowania i regulacji obiektów dynamicznych, jak również pozwala na lepszy opis dynamiki wybranych obiektów [3], [7], [10], [14], [26], [27], [44]. Nie ma ogólnodostępnej biblioteki, która pozwala na symulację układów z definicji  Grünwald'a-Letnikov'a, a taka byłaby przydatna w przyszłości, zapewne na potrzeby niektórych pracowników PB, z tego względu rozwiązaniem i pomocą będzie ten projekt.

\section*{Założenia}
Projekt zakłada stworzenie narzędzia, które umożliwi symulację rachunku różniczkowego według definicji Grünwald'a-Letnikov'a, dla zadanego rzędu ułamkowego i warunków początkowych układu. Argumentami wejściowymi będą: czas symulacji, okres próbkowania, rząd układu, macierz stanu, wymiar układu. Dane wyjściowe będzie stanowić obliczony wektor stanu w postaci macierzy, gdzie kolumna to wektor stanu dla danej próbki, natomiast rzędy to kolejne próbki wektora stanu. Drugą daną wyjściową będzie wektor czasu symulacji, co ułatwi tworzenie Rysunków. Projekt musi posiadać również drugą funkcję, której argumentem wejściowym będzie rząd układu oraz aktualna próbka. Będzie wywoływana przez funkcję symulacyjną i jej zadaniem będzie obliczanie wpływu pamięci układu, który trzeba uwzględnić według definicji do poprawnego działania poprzedniej funkcji. Projekt będzie posiadał także interfejs użytkownika, dzięki któremu będzie możliwe wprowadzanie danych wejściowych i obserwowanie obliczanych  przebiegów wielkości w przestrzeni stanu i przestrzeni czasu. Następnym założeniem będzie obliczanie i dopasowywanie funkcji Lapunowa układu niecałkowitego dla rzędów poniżej jedności, co umożliwi weryfikację stosowalności dodatniookreślonych funkcji w przypadku układów niecałkowitego rzędu. Możliwa będzie również zmiana definicji układu na Caputo, z wykorzystaniem istniejącej biblioteki FOTF i integracji z pakietem Simulink.  
\section*{Wymagania stawiane oprogramowaniu}
Oprogramowanie powinno zawierać integrację z systemem kontroli wersji: git/github. Dane wejściowe działania funkcji muszą być sprawdzane pod kątem weryfikacji poprawności wprowadzanych danych, ponieważ jeśli użytkownik wproawadzi błędne dane, lub program zacznie działać w nieprawidłowy sposób powinien zwrócić błąd krytyczny, który pozwoli na ocenę i debugowanie kodu źródłowego w poszukiwaniu elementów nieprawidłowo działających. Dane wyjściowe działania funkcji powinny być sprawdzane pod względem występowania NaN lub inf, co zazwyczaj będzie świadczyło o niepoprawnym wywołaniu, lub występowaniu błędów w działaniu oprogramowania. Na koniec trzeba zapewnieć integrację oprogramowania z systemami wykonywania testów jednostkowych, które będą pozwalały na ewaluację działania oprogramowania pod względem kontroli błędów, czasu działąnia, reakcji oprogramowania na występowanie szkodliwych danych zakłóceniowych. 
\section*{Dobór i analiza komponentów systemu}
Główny trzon programu będzie stanowiła definicja układów niecałkowitego rzędu, w ujęciu dyskretnym. Twórcy biblioteki FOMCON aproksymują definicję modeli niecałkowitego rzędu, przy użyciu aproksymacji bazującej na definicji dyskretnej Grünwald'a-Letnikov'a. Jednak nie zdradzają w jaki sposób modyfikują definicję, aby spełniała postulaty związane z definicjami Caputo i Riemann'a - Liouvill'a. Podstawowym komponentem systemu w założeniu tego projektu będzie oparcie modelu na definicji (1).

\begin{equation}
    x_{k+1} = Ax_{k} - \sum_{j=1}^{k}(-1)^{j+1} \left( \begin{matrix} \alpha \\ j \end{matrix} \right)x_{k-j+1} + Bu_{k}
\end{equation}
gdzie:
\begin{itemize}
    \item $x_{k+1}$ - następna (obliczana) próbka wektora stanu
    \item $A$ - macierz stanu
    \item $x_{k}$ - obecna próbka wektora stanu
    \item $B$ - wektor wejść
    \item $u_k$ - sterowanie
\end{itemize}
Definicja Caputo (2), w opinii wielu naukowców zakłada trochę inne postulaty niż (1). 
\begin{equation}
    ^C_0D^\alpha x(t) = \frac{1}{\Gamma (n-\alpha)} \int_{0}^{t} \frac{x^{\left(n\right)}(\tau)}{(t-\tau)^{\alpha-n+1}}d\tau
\end{equation}
Dokonując dyskretyzacji (3), dla h = 1; według klasycznych metod można dostrzec kilka istotnych problemów z implementacją definicji w obecnej postaci (2). Definicja Riemann'a - Liouvill'a jest zbędna w wypadku projektu, ze względu na brak możliwości założenia warunków początkowych, więc nie zostanie przedstawiona.
\begin{equation}
    \frac{1}{\Gamma (n-\alpha)} \sum_{i=0}^{k} \frac{\Delta x_{i}}{(k-i)^{\alpha-n+1}} = Ax_{k} + Bu_{k}
\end{equation}
Głownym problemem zawartym w (3) jest występowanie sumy różnic dla $\alpha = 1$. Problem przedstawię za pomocą skalarnego iloczynu dwóch wektorów(4), który jest reprezentacją sumy zawartej w (3).
\begin{equation}
    \begin{bmatrix}
        
    \end{bmatrix}
\end{equation}
\nocite{*}
\bibliographystyle{plain}
\bibliography{biblioteka}
	
\end{document}
